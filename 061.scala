/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle    P3,n=n(n+1)/2   1, 3, 6, 10, 15, ...
Square      P4,n=n^2        1, 4, 9, 16, 25, ...
Pentagonal  P5,n=n(3n-1)/2  1, 5, 12, 22, 35, ...
Hexagonal   P6,n=n(2n-1)    1, 6, 15, 28, 45, ...
Heptagonal  P7,n=n(5n-3)/2  1, 7, 18, 34, 55, ...
Octagonal   P8,n=n(3n-2)    1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number
(including the last number with the first).

2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882),
is represented by a different number in the set.

3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/

def isTriangular(n: Int): Boolean = (-1 + scala.math.sqrt(8 * n + 1)) % 2 == 0
def isSquare(n: Int): Boolean = scala.math.sqrt(n) % 1 == 0
def isPentagonal(n: Int): Boolean = (1 + scala.math.sqrt(24 * n + 1)) % 6 == 0
def isHexagonal(n: Int): Boolean = (1 + scala.math.sqrt(1 + 8 * n)) % 4 == 0
def isHeptagonal(n: Int): Boolean = (3 + scala.math.sqrt(40 * n + 9)) % 10 == 0
def isOctagonal(n: Int): Boolean = (2 + scala.math.sqrt(12 * n + 4)) % 6 == 0
def isPolygonal(n: Int): Boolean = isTriangular(n) || isSquare(n) || isPentagonal(n) || isHexagonal(n) ||  isHeptagonal(n) || isOctagonal(n)
val polygonals = Stream.range(1000, 9999).filter(isPolygonal(_)).filter(_.toString.takeRight(2).toInt >= 10).toSet

def listsWith1MorePolygonal(current: List[Int]): Set[List[Int]] = {
  val lastTwoDigits = current.last.toString.takeRight(2).toInt
  val nextElems = (polygonals -- current).filter(_.toString.take(2).toInt == lastTwoDigits)
  nextElems.map(current :+ _)
}
def isCyclic(list: List[Int]): Boolean = list.last.toString.takeRight(2) == list.head.toString.take(2)
def isRepresentative(list: List[Int]): Boolean = {
  require(list.size == 6)
  list.permutations.exists(list =>
    isOctagonal(list(0)) && isHeptagonal(list(1)) && isHexagonal(list(2)) &&
    isPentagonal(list(3)) && isSquare(list(4)) && isTriangular(list(5)))
}

val A61 = polygonals.toList.map(List(_))
  .map(listsWith1MorePolygonal(_)).flatten
  .map(listsWith1MorePolygonal(_)).flatten
  .map(listsWith1MorePolygonal(_)).flatten
  .map(listsWith1MorePolygonal(_)).flatten
  .map(listsWith1MorePolygonal(_)).flatten
  .filter(isCyclic(_))
  .filter(isRepresentative(_))
  .head.sum
